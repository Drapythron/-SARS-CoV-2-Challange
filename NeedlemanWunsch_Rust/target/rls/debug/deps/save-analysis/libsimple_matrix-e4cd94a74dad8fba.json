{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2","program":"C:\\Users\\PC Sergio\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","simple_matrix","--edition=2018","C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=e4cd94a74dad8fba","-C","extra-filename=-e4cd94a74dad8fba","--out-dir","c:\\Users\\PC Sergio\\OneDrive\\Universidad\\CURSO 2\\2ยบ Semestre\\ALGORITMICA Y COMPLEJIDAD\\REPOSITORIOS\\SARS-CoV-2-Challenge\\NeedlemanWunsch_Rust\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\PC Sergio\\OneDrive\\Universidad\\CURSO 2\\2ยบ Semestre\\ALGORITMICA Y COMPLEJIDAD\\REPOSITORIOS\\SARS-CoV-2-Challenge\\NeedlemanWunsch_Rust\\target\\rls\\debug\\deps","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\PC Sergio\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\PC Sergio\\OneDrive\\Universidad\\CURSO 2\\2ยบ Semestre\\ALGORITMICA Y COMPLEJIDAD\\REPOSITORIOS\\SARS-CoV-2-Challenge\\NeedlemanWunsch_Rust\\target\\rls\\debug\\deps\\libsimple_matrix-e4cd94a74dad8fba.rmeta"},"prelude":{"crate_id":{"name":"simple_matrix","disambiguator":[12483796224148316073,11494432576234016307]},"crate_root":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src","external_crates":[{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[9841458385686728621,15575055662541448531]}},{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[17919213227389061864,3687462448081315021]}},{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[117649788198974291,9401830764183487500]}},{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[16805511066922772367,1475770714066637805]}},{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[6932327359549611065,14246427449334719808]}},{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[10224979718716634612,8460908855091801084]}},{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[3917603931972316087,6031530912861913142]}},{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[1909649518730319250,15976693491490976054]}},{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[9858513891483661062,11973857511412016831]}},{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[2302790573754666385,5170192652780636563]}},{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\lib.rs","num":11,"id":{"name":"hashbrown","disambiguator":[16882338025965339030,8535442690485361914]}},{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\lib.rs","num":12,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[4842953915852994816,3810175436331841417]}},{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\lib.rs","num":13,"id":{"name":"panic_unwind","disambiguator":[14037401367256211658,2835270069367976133]}}],"span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\lib.rs","byte_start":0,"byte_end":2410,"line_start":1,"line_end":112,"column_start":1,"column_end":26}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\lib.rs","byte_start":2408,"byte_end":2409,"line_start":112,"line_end":112,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\lib.rs","byte_start":0,"byte_end":2410,"line_start":1,"line_end":112,"column_start":1,"column_end":26},"name":"","qualname":"::","value":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":72}],"decl_id":null,"docs":"# Matrix-rs: A generic matrix library in Rust\nMatrix-rs is a simple matrix library designed to be easy to use.","sig":null,"attributes":[{"value":"!\n# Matrix-rs: A generic matrix library in Rust\nMatrix-rs is a simple matrix library designed to be easy to use.\n\n# Disclaimer\nThis crate should not be considered mature enough for *professional use*, check alternatives like [cgmath](https://github.com/brendanzab/cgmath) or [nalgebra](https://github.com/sebcrozet/nalgebra) if you are in that case.\n\nIf you are still interested, feel free to continue!\n\n# Usage \nLink it in your project's `Cargo.toml` file:\n```text\n# Example Cargo.toml\n\n[dependencies]\nsimple-matrix = \"0.1\"\n```\n\nThen, you can use it in your project:\n## Rust 2015\n```\n// Specify the extern crate in your lib.rs or main.rs\nextern crate simple_matrix;\n\n// You can now use it\nuse simple_matrix::Matrix;\n\nlet mat: Matrix<i32> = Matrix::new();\n```\n\n## Rust 2018\n```\n// No need to specify an extern crate\n// You can use it directly\nuse simple_matrix::Matrix;\n\nlet mat: Matrix<i32> = Matrix::new();\n```\n\n# Example: Basic matrix usage\n```\n// Create a matrix of default cells\nlet zero: Matrix<u32> = Matrix::new(3, 3);\n\n// Create a 2x4 matrix from an iterator (fill it row by row)\nlet mat1: Matrix<u32> = Matrix::from_iter(2, 4, 0..);\n\n// Clone a matrix\nlet mat2 = mat1.clone();\n\n\n// Add by reference (do not consume them)\nlet mut add = &mat1 + &mat2;\n\n// Subtract by value (consume them)\nlet mut sub = mat1 - mat2;\n\n// OpAssign are also available\nsub += &zero;\nsub -= zero;\n\n\n// Get cells\nlet val: &u32 = add.get(0, 3).unwrap();\n\n// Set cells\nadd.set(0, 3, 0);\n\n// Iterate through the matrix (row by row)\nfor val in add {\n    print!(\"{} \", val);\n}\n```\n\n# Example: Dot product\n```\nlet mat: Matrix<f64> = Matrix::from_iter(2, 4, 0..);\n\n// Construct the transposed matrix\nlet mat_t = mat.transpose();\n\n// Construct the dot product\nlet dot = mat * mat_t;\n```\n\n# Features\n- *Features are extensions of the library left to opt-in by the user.*\n- *They can increase compilation time and library size.*\n\nTo include a feature, add it to your `Cargo.toml` file:\n```text\n# Example Cargo.toml with added feature (replace values with your own)\n\n[dependencies]\nsimple-matrix = { version = \"0.1\", features = [\"impl_from\"] }\n```\n\nCurrent available features are listed below with a little description:\n## impl_from\nImplements the *From* Trait for basic numeric types.\n\n```\nlet m1: Matrix<i8> = Matrix::new(3, 5);\nlet m2: Matrix<i64> = m1.into();\n```\n*/","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\lib.rs","byte_start":0,"byte_end":2346,"line_start":1,"line_end":106,"column_start":1,"column_end":3}},{"value":"deny(missing_docs)","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\lib.rs","byte_start":2348,"byte_end":2370,"line_start":108,"line_end":108,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":115},"span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":2612,"byte_end":2618,"line_start":10,"line_end":10,"column_start":12,"column_end":18},"name":"Matrix","qualname":"::matrix::Matrix","value":"Matrix {  }","parent":null,"children":[{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":119}],"decl_id":null,"docs":" A 2-Dimensional, non-resisable container.\n","sig":null,"attributes":[{"value":"/ A 2-Dimensional, non-resisable container.","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":2498,"byte_end":2543,"line_start":8,"line_end":8,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":3064,"byte_end":3067,"line_start":27,"line_end":27,"column_start":12,"column_end":15},"name":"new","qualname":"<Matrix<T>>::new","value":"fn (rows: usize, cols: usize) -> Matrix<T>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new, non-empty Matrix<T> where cells are set to `T::default`.  \n Use `Matrix::from_iter` if you want to set the matrix from an iterator.","sig":null,"attributes":[{"value":"/ Constructs a new, non-empty Matrix<T> where cells are set to `T::default`.  ","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":2703,"byte_end":2783,"line_start":17,"line_end":17,"column_start":5,"column_end":85}},{"value":"/ Use `Matrix::from_iter` if you want to set the matrix from an iterator.","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":2788,"byte_end":2863,"line_start":18,"line_end":18,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":2868,"byte_end":2871,"line_start":19,"line_end":19,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":2876,"byte_end":2888,"line_start":20,"line_end":20,"column_start":5,"column_end":17}},{"value":"/ Panics if either `rows` or `cols` are equal to `0`","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":2893,"byte_end":2947,"line_start":21,"line_end":21,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":2952,"byte_end":2955,"line_start":22,"line_end":22,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":2960,"byte_end":2974,"line_start":23,"line_end":23,"column_start":5,"column_end":19}},{"value":"/ ```","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":2979,"byte_end":2986,"line_start":24,"line_end":24,"column_start":5,"column_end":12}},{"value":"/ let mut mat: Matrix<i32> = Matrix::new(3, 6);","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":2991,"byte_end":3040,"line_start":25,"line_end":25,"column_start":5,"column_end":54}},{"value":"/ ```","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":3045,"byte_end":3052,"line_start":26,"line_end":26,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":3882,"byte_end":3891,"line_start":51,"line_end":51,"column_start":12,"column_end":21},"name":"from_iter","qualname":"<Matrix<T>>::from_iter","value":"fn (rows: usize, cols: usize, data: impl IntoIterator<Item = T>) -> Matrix<T>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new, non-empty Matrix<T> where cells are set from an iterator.  \n The matrix cells are set row by row.  \n The iterator can be infinite, this method only consume `rows * cols`\n values from the iterator.","sig":null,"attributes":[{"value":"/ Constructs a new, non-empty Matrix<T> where cells are set from an iterator.  ","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":3221,"byte_end":3302,"line_start":34,"line_end":34,"column_start":5,"column_end":86}},{"value":"/ The matrix cells are set row by row.  ","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":3307,"byte_end":3349,"line_start":35,"line_end":35,"column_start":5,"column_end":47}},{"value":"/ The iterator can be infinite, this method only consume `rows * cols`","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":3354,"byte_end":3426,"line_start":36,"line_end":36,"column_start":5,"column_end":77}},{"value":"/ values from the iterator.","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":3431,"byte_end":3460,"line_start":37,"line_end":37,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":3465,"byte_end":3468,"line_start":38,"line_end":38,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":3473,"byte_end":3485,"line_start":39,"line_end":39,"column_start":5,"column_end":17}},{"value":"/ Panics if either `rows` or `cols` are equal to `0`.  ","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":3490,"byte_end":3547,"line_start":40,"line_end":40,"column_start":5,"column_end":62}},{"value":"/ Panics if the iterator does not have `rows * cols` values","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":3552,"byte_end":3613,"line_start":41,"line_end":41,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":3618,"byte_end":3621,"line_start":42,"line_end":42,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":3626,"byte_end":3640,"line_start":43,"line_end":43,"column_start":5,"column_end":19}},{"value":"/ ```","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":3645,"byte_end":3652,"line_start":44,"line_end":44,"column_start":5,"column_end":12}},{"value":"/ let mat: Matrix<usize> = Matrix::new(3, 6, 0..);","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":3657,"byte_end":3709,"line_start":45,"line_end":45,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":3714,"byte_end":3717,"line_start":46,"line_end":46,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(mat.get(0, 0).unwrap(), 0);","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":3722,"byte_end":3764,"line_start":47,"line_end":47,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(mat.get(0, 1).unwrap(), 1);","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":3769,"byte_end":3811,"line_start":48,"line_end":48,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(mat.get(1, 0).unwrap(), 6);","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":3816,"byte_end":3858,"line_start":49,"line_end":49,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":3863,"byte_end":3870,"line_start":50,"line_end":50,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":50},"span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":4480,"byte_end":4484,"line_start":73,"line_end":73,"column_start":12,"column_end":16},"name":"rows","qualname":"<Matrix<T>>::rows","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of rows in the matrix.","sig":null,"attributes":[{"value":"/ Returns the number of rows in the matrix.","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":4272,"byte_end":4317,"line_start":65,"line_end":65,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":4322,"byte_end":4325,"line_start":66,"line_end":66,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":4330,"byte_end":4344,"line_start":67,"line_end":67,"column_start":5,"column_end":19}},{"value":"/ ```","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":4349,"byte_end":4356,"line_start":68,"line_end":68,"column_start":5,"column_end":12}},{"value":"/ let mat: Matrix<usize> = Matrix::new(3, 6, 0..);","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":4361,"byte_end":4413,"line_start":69,"line_end":69,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":4418,"byte_end":4421,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(mat.rows(), 3);","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":4426,"byte_end":4456,"line_start":71,"line_end":71,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":4461,"byte_end":4468,"line_start":72,"line_end":72,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":51},"span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":4743,"byte_end":4747,"line_start":85,"line_end":85,"column_start":12,"column_end":16},"name":"cols","qualname":"<Matrix<T>>::cols","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of columns in the matrix.","sig":null,"attributes":[{"value":"/ Returns the number of columns in the matrix.","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":4532,"byte_end":4580,"line_start":77,"line_end":77,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":4585,"byte_end":4588,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":4593,"byte_end":4607,"line_start":79,"line_end":79,"column_start":5,"column_end":19}},{"value":"/ ```","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":4612,"byte_end":4619,"line_start":80,"line_end":80,"column_start":5,"column_end":12}},{"value":"/ let mat: Matrix<usize> = Matrix::new(3, 6, 0..);","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":4624,"byte_end":4676,"line_start":81,"line_end":81,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":4681,"byte_end":4684,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(mat.cols(), 6);","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":4689,"byte_end":4719,"line_start":83,"line_end":83,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":4724,"byte_end":4731,"line_start":84,"line_end":84,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":5199,"byte_end":5202,"line_start":101,"line_end":101,"column_start":12,"column_end":15},"name":"get","qualname":"<Matrix<T>>::get","value":"fn (&self, row: usize, col: usize) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Try to get a reference to the value at given row & column.  \n Returns `None` if `row` or `col` is outside of the matrix.","sig":null,"attributes":[{"value":"/ Try to get a reference to the value at given row & column.  ","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":4795,"byte_end":4859,"line_start":89,"line_end":89,"column_start":5,"column_end":69}},{"value":"/ Returns `None` if `row` or `col` is outside of the matrix.","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":4864,"byte_end":4926,"line_start":90,"line_end":90,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":4931,"byte_end":4934,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":4939,"byte_end":4953,"line_start":92,"line_end":92,"column_start":5,"column_end":19}},{"value":"/ ```","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":4958,"byte_end":4965,"line_start":93,"line_end":93,"column_start":5,"column_end":12}},{"value":"/ let mat: Matrix<usize> = Matrix::new(3, 6, 0..);","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":4970,"byte_end":5022,"line_start":94,"line_end":94,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":5027,"byte_end":5030,"line_start":95,"line_end":95,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(mat.get(0, 0).unwrap(), 0);","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":5035,"byte_end":5077,"line_start":96,"line_end":96,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(mat.get(2, 5).unwrap(), 17);","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":5082,"byte_end":5125,"line_start":97,"line_end":97,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":5130,"byte_end":5133,"line_start":98,"line_end":98,"column_start":5,"column_end":8}},{"value":"/ assert!(mat.get(10, 2).is_err());","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":5138,"byte_end":5175,"line_start":99,"line_end":99,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":5180,"byte_end":5187,"line_start":100,"line_end":100,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":53},"span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":5843,"byte_end":5850,"line_start":122,"line_end":122,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Matrix<T>>::get_mut","value":"fn (&mut self, row: usize, col: usize) -> Option<&mut T>","parent":null,"children":[],"decl_id":null,"docs":" Try to get a mutable reference to the cell at given row & column.  \n Returns `None` if `row` or `col` is outside of the matrix.","sig":null,"attributes":[{"value":"/ Try to get a mutable reference to the cell at given row & column.  ","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":5405,"byte_end":5476,"line_start":109,"line_end":109,"column_start":5,"column_end":76}},{"value":"/ Returns `None` if `row` or `col` is outside of the matrix.","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":5481,"byte_end":5543,"line_start":110,"line_end":110,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":5548,"byte_end":5551,"line_start":111,"line_end":111,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":5556,"byte_end":5570,"line_start":112,"line_end":112,"column_start":5,"column_end":19}},{"value":"/ ```","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":5575,"byte_end":5582,"line_start":113,"line_end":113,"column_start":5,"column_end":12}},{"value":"/ let mut mat: Matrix<usize> = Matrix::new(3, 6, 0..);","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":5587,"byte_end":5643,"line_start":114,"line_end":114,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(mat.get(0, 0).unwrap(), 0);","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":5648,"byte_end":5690,"line_start":115,"line_end":115,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":5695,"byte_end":5698,"line_start":116,"line_end":116,"column_start":5,"column_end":8}},{"value":"/ let cell = mat.get_mut(0, 0).unwrap();","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":5703,"byte_end":5745,"line_start":117,"line_end":117,"column_start":5,"column_end":47}},{"value":"/ *cell = 5;","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":5750,"byte_end":5764,"line_start":118,"line_end":118,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":5769,"byte_end":5772,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(mat.get(0, 0).unwrap(), 5);","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":5777,"byte_end":5819,"line_start":120,"line_end":120,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":5824,"byte_end":5831,"line_start":121,"line_end":121,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":6508,"byte_end":6511,"line_start":142,"line_end":142,"column_start":12,"column_end":15},"name":"set","qualname":"<Matrix<T>>::set","value":"fn (&mut self, row: usize, col: usize, value: T) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Try to set the cell at given row & column to the given value.  \n Returns `false` if `row` or `col` is outside of the matrix.  \n Returns `true` if the cell has been modified.","sig":null,"attributes":[{"value":"/ Try to set the cell at given row & column to the given value.  ","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":6065,"byte_end":6132,"line_start":130,"line_end":130,"column_start":5,"column_end":72}},{"value":"/ Returns `false` if `row` or `col` is outside of the matrix.  ","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":6137,"byte_end":6202,"line_start":131,"line_end":131,"column_start":5,"column_end":70}},{"value":"/ Returns `true` if the cell has been modified.","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":6207,"byte_end":6256,"line_start":132,"line_end":132,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":6261,"byte_end":6264,"line_start":133,"line_end":133,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":6269,"byte_end":6283,"line_start":134,"line_end":134,"column_start":5,"column_end":19}},{"value":"/ ```","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":6288,"byte_end":6295,"line_start":135,"line_end":135,"column_start":5,"column_end":12}},{"value":"/ let mut mat: Matrix<usize> = Matrix::new(3, 6, 0..);","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":6300,"byte_end":6356,"line_start":136,"line_end":136,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(mat.get(0, 0).unwrap(), 0);","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":6361,"byte_end":6403,"line_start":137,"line_end":137,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":6408,"byte_end":6411,"line_start":138,"line_end":138,"column_start":5,"column_end":8}},{"value":"/ mat.set(0, 0, 5);","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":6416,"byte_end":6437,"line_start":139,"line_end":139,"column_start":5,"column_end":26}},{"value":"/ assert_eq!(mat.get(0, 0).unwrap(), 5);","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":6442,"byte_end":6484,"line_start":140,"line_end":140,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":6489,"byte_end":6496,"line_start":141,"line_end":141,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":55},"span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":7094,"byte_end":7101,"line_start":162,"line_end":162,"column_start":12,"column_end":19},"name":"get_row","qualname":"<Matrix<T>>::get_row","value":"fn (&self, row: usize) -> Option<impl Iterator<Item = &T>>","parent":null,"children":[],"decl_id":null,"docs":" Try to get an iterator of all cells of the requested row.  \n Returns `None` if given row is outside of the matrix.","sig":null,"attributes":[{"value":"/ Try to get an iterator of all cells of the requested row.  ","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":6720,"byte_end":6783,"line_start":151,"line_end":151,"column_start":5,"column_end":68}},{"value":"/ Returns `None` if given row is outside of the matrix.","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":6788,"byte_end":6845,"line_start":152,"line_end":152,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":6850,"byte_end":6853,"line_start":153,"line_end":153,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":6858,"byte_end":6872,"line_start":154,"line_end":154,"column_start":5,"column_end":19}},{"value":"/ ```","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":6877,"byte_end":6884,"line_start":155,"line_end":155,"column_start":5,"column_end":12}},{"value":"/ let mat: Matrix<usize> = Matrix::new(3, 6, 0..);","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":6889,"byte_end":6941,"line_start":156,"line_end":156,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":6946,"byte_end":6949,"line_start":157,"line_end":157,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(mat.get_row(1).unwrap(), vec![6, 7, 8, 9, 10, 11]);","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":6954,"byte_end":7020,"line_start":158,"line_end":158,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":7025,"byte_end":7028,"line_start":159,"line_end":159,"column_start":5,"column_end":8}},{"value":"/ assert!(mat.get_row(5).is_err());","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":7033,"byte_end":7070,"line_start":160,"line_end":160,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":7075,"byte_end":7082,"line_start":161,"line_end":161,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":58},"span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":7688,"byte_end":7695,"line_start":181,"line_end":181,"column_start":12,"column_end":19},"name":"get_col","qualname":"<Matrix<T>>::get_col","value":"fn (&self, col: usize) -> Option<impl Iterator<Item = &T>>","parent":null,"children":[],"decl_id":null,"docs":" Try to get an iterator of all cells of the requested column.  \n Returns `None` if given row is outside of the matrix.","sig":null,"attributes":[{"value":"/ Try to get an iterator of all cells of the requested column.  ","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":7320,"byte_end":7386,"line_start":170,"line_end":170,"column_start":5,"column_end":71}},{"value":"/ Returns `None` if given row is outside of the matrix.","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":7391,"byte_end":7448,"line_start":171,"line_end":171,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":7453,"byte_end":7456,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":7461,"byte_end":7475,"line_start":173,"line_end":173,"column_start":5,"column_end":19}},{"value":"/ ```","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":7480,"byte_end":7487,"line_start":174,"line_end":174,"column_start":5,"column_end":12}},{"value":"/ let mat: Matrix<usize> = Matrix::new(3, 6, 0..);","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":7492,"byte_end":7544,"line_start":175,"line_end":175,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":7549,"byte_end":7552,"line_start":176,"line_end":176,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(mat.get_col(1).unwrap(), vec![1, 7, 13]);","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":7557,"byte_end":7613,"line_start":177,"line_end":177,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":7618,"byte_end":7621,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ assert!(mat.get_col(10).is_err());","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":7626,"byte_end":7664,"line_start":179,"line_end":179,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":7669,"byte_end":7676,"line_start":180,"line_end":180,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":61},"span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":8389,"byte_end":8398,"line_start":202,"line_end":202,"column_start":12,"column_end":21},"name":"transpose","qualname":"<Matrix<T>>::transpose","value":"fn (&self) -> Matrix<T>","parent":null,"children":[],"decl_id":null,"docs":" Take a *M*x*N* Matrix and construct the transposed *N*x*M* Matrix.","sig":null,"attributes":[{"value":"/ Take a *M*x*N* Matrix and construct the transposed *N*x*M* Matrix.","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":7914,"byte_end":7984,"line_start":189,"line_end":189,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":7989,"byte_end":7992,"line_start":190,"line_end":190,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":7997,"byte_end":8011,"line_start":191,"line_end":191,"column_start":5,"column_end":19}},{"value":"/ ```","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":8016,"byte_end":8023,"line_start":192,"line_end":192,"column_start":5,"column_end":12}},{"value":"/ let mat: Matrix<usize> = Matrix::new(3, 6, 0..);","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":8028,"byte_end":8080,"line_start":193,"line_end":193,"column_start":5,"column_end":57}},{"value":"/ let mat_t = mat.transpose();","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":8085,"byte_end":8117,"line_start":194,"line_end":194,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":8122,"byte_end":8125,"line_start":195,"line_end":195,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(mat.rows(), mat_t.cols());","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":8130,"byte_end":8171,"line_start":196,"line_end":196,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(mat.cols(), mat_t.rows());","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":8176,"byte_end":8217,"line_start":197,"line_end":197,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":8222,"byte_end":8225,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(mat.get(0, 0).unwrap(), mat_t.get(0, 0).unwrap());","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":8230,"byte_end":8295,"line_start":199,"line_end":199,"column_start":5,"column_end":70}},{"value":"/ assert_eq!(mat.get(1, 2).unwrap(), mat_t.get(2, 1).unwrap());","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":8300,"byte_end":8365,"line_start":200,"line_end":200,"column_start":5,"column_end":70}},{"value":"/ ```","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":8370,"byte_end":8377,"line_start":201,"line_end":201,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":9298,"byte_end":9303,"line_start":234,"line_end":234,"column_start":12,"column_end":17},"name":"apply","qualname":"<Matrix<T>>::apply","value":"fn <F> (&self, mut func: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Apply a function to all cells of the matrix.  \n Cells are provided as immutable references to the function,\n if you want to modify the cells, use `apply_mut`.","sig":null,"attributes":[{"value":"/ Apply a function to all cells of the matrix.  ","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":8869,"byte_end":8919,"line_start":221,"line_end":221,"column_start":5,"column_end":55}},{"value":"/ Cells are provided as immutable references to the function,","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":8924,"byte_end":8987,"line_start":222,"line_end":222,"column_start":5,"column_end":68}},{"value":"/ if you want to modify the cells, use `apply_mut`.","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":8992,"byte_end":9045,"line_start":223,"line_end":223,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":9050,"byte_end":9053,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":9058,"byte_end":9072,"line_start":225,"line_end":225,"column_start":5,"column_end":19}},{"value":"/ ```","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":9077,"byte_end":9084,"line_start":226,"line_end":226,"column_start":5,"column_end":12}},{"value":"/ // Get the sum of all cells","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":9089,"byte_end":9120,"line_start":227,"line_end":227,"column_start":5,"column_end":36}},{"value":"/ let mat: Matrix<usize> = Matrix::new(3, 6, 0..);","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":9125,"byte_end":9177,"line_start":228,"line_end":228,"column_start":5,"column_end":57}},{"value":"/ let mut sum = 0;","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":9182,"byte_end":9202,"line_start":229,"line_end":229,"column_start":5,"column_end":25}},{"value":"/ mat.apply(|n| sum += *n);","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":9207,"byte_end":9236,"line_start":230,"line_end":230,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":9241,"byte_end":9244,"line_start":231,"line_end":231,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(sum, 153);","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":9249,"byte_end":9274,"line_start":232,"line_end":232,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":9279,"byte_end":9286,"line_start":233,"line_end":233,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":65},"span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":9906,"byte_end":9915,"line_start":252,"line_end":252,"column_start":12,"column_end":21},"name":"apply_mut","qualname":"<Matrix<T>>::apply_mut","value":"fn <F> (&mut self, mut func: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Apply a function to all cells of the matrix.  \n Cells are provided as mutable references to the function,\n and can therefore be modified.","sig":null,"attributes":[{"value":"/ Apply a function to all cells of the matrix.  ","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":9399,"byte_end":9449,"line_start":238,"line_end":238,"column_start":5,"column_end":55}},{"value":"/ Cells are provided as mutable references to the function,","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":9454,"byte_end":9515,"line_start":239,"line_end":239,"column_start":5,"column_end":66}},{"value":"/ and can therefore be modified.","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":9520,"byte_end":9554,"line_start":240,"line_end":240,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":9559,"byte_end":9562,"line_start":241,"line_end":241,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":9567,"byte_end":9581,"line_start":242,"line_end":242,"column_start":5,"column_end":19}},{"value":"/ ```","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":9586,"byte_end":9593,"line_start":243,"line_end":243,"column_start":5,"column_end":12}},{"value":"/ // Modify all cells with a function","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":9598,"byte_end":9637,"line_start":244,"line_end":244,"column_start":5,"column_end":44}},{"value":"/ let mut mat: Matrix<usize> = Matrix::new(3, 6, 0..);","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":9642,"byte_end":9698,"line_start":245,"line_end":245,"column_start":5,"column_end":61}},{"value":"/ mat.apply_mut(|n| n *= 2);","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":9703,"byte_end":9733,"line_start":246,"line_end":246,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":9738,"byte_end":9741,"line_start":247,"line_end":247,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(mat.get(0, 0).unwrap(), 0);","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":9746,"byte_end":9788,"line_start":248,"line_end":248,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(mat.get(0, 1).unwrap(), 2);","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":9793,"byte_end":9835,"line_start":249,"line_end":249,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(mat.get(0, 2).unwrap(), 4);","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":9840,"byte_end":9882,"line_start":250,"line_end":250,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":9887,"byte_end":9894,"line_start":251,"line_end":251,"column_start":5,"column_end":12}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix\\iter.rs","byte_start":10222,"byte_end":10228,"line_start":5,"line_end":5,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix\\std_ops.rs","byte_start":13517,"byte_end":13523,"line_start":97,"line_end":97,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":35},{"krate":0,"index":36}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":2687,"byte_end":2693,"line_start":16,"line_end":16,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":46},{"krate":0,"index":48},{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":58},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":65}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":10039,"byte_end":10045,"line_start":257,"line_end":257,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":70},{"krate":0,"index":71}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix\\iter.rs","byte_start":10222,"byte_end":10228,"line_start":5,"line_end":5,"column_start":26,"column_end":32},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":115},"to":{"krate":2,"index":4687}},{"span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix\\std_ops.rs","byte_start":13517,"byte_end":13523,"line_start":97,"line_end":97,"column_start":28,"column_end":34},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":115},"to":{"krate":2,"index":1956}},{"span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":2687,"byte_end":2693,"line_start":16,"line_end":16,"column_start":9,"column_end":15},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":115},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\PC Sergio\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\simple-matrix-0.1.2\\src\\matrix.rs","byte_start":10039,"byte_end":10045,"line_start":257,"line_end":257,"column_start":19,"column_end":25},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":115},"to":{"krate":2,"index":2054}}]}